{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/index.js","store.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/Register.js","components/auth/Login.js","components/layout/form.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","arguments","length","undefined","action","Object","objectSpread","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","XNavbar","onLogoutClick","e","preventDefault","_this","props","react_default","a","createElement","Navbar","style","background","Collapse","id","Nav","padding","Link","href","fontFamily","className","jwtToken","Button","width","borderRadius","letterSpacing","color","marginLeft","float","onClick","this","React","Component","connect","Landing","data","_this2","fetch","then","res","json","console","log","setState","catch","err","key","totalResponse","map","questions","i","identifier","headline","toUpperCase","response","_id","submittedByName","j","answer","Register","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","defineProperty","target","value","onSubmit","newUser","name","email","password","password2","registerUser","history","push","nextProps","paddingLeft","noValidate","error","classnames","invalid","htmlFor","marginTop","to","userData","post","withRouter","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","XForm","description","question","question_type","multiline","for","fontSize","fontStyle","placeholder","height","multiple","react_radio_buttons_lib","choices","choice","checked","selected","marginBottom","currentTime","Date","now","exp","location","App","es","BrowserRouter","layout_Navbar","Route","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8PAUeA,EATM,SAAAC,GACfA,EAEFC,IAAMC,SAASC,QAAQC,OAAvB,cAAiDJ,SAG1CC,IAAMC,SAASC,QAAQC,OAAvB,eCqCEC,EAAiB,SAAAC,GAC5B,MAAO,CACLC,KC5C4B,mBD6C5BC,QAASF,IAUAG,EAAa,kBAAM,SAAAC,GAE9BC,aAAaC,WAAW,YAExBb,GAAa,GAEbW,EAASL,EAAe,uCE3DlBQ,EAAUC,EAAQ,IAClBC,EAAe,CACnBC,iBAAiB,EACjBC,KAAM,GACNC,SAAS,GCPPH,EAAe,GCENI,cAAgB,CAC7BC,KFMe,WAAuC,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBP,EAAcU,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOlB,MACb,IDV0B,mBCWxB,OAAOmB,OAAAC,EAAA,EAAAD,CAAA,GACFL,EADL,CAEEL,iBAAkBH,EAAQY,EAAOjB,SACjCS,KAAMQ,EAAOjB,UAEjB,IDjBsB,eCkBpB,OAAOkB,OAAAC,EAAA,EAAAD,CAAA,GACFL,EADL,CAEEH,SAAS,IAEb,QACE,OAAOG,IEnBbO,ODHa,WAAuC,IAA9BP,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBP,EAAcU,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOlB,MACb,IFJsB,aEKpB,OAAOkB,EAAOjB,QAChB,QACE,OAAOa,MEDPQ,EAAa,CAACC,KAaLC,EAXDC,YACZC,EALmB,GAOnBC,YACEC,IAAeC,WAAf,EAAmBP,GAClBQ,OAAOC,sCACND,OAAOC,wCACPJ,iCCTAK,6MACJC,cAAgB,SAAAC,GACdA,EAAEC,iBACFC,EAAKC,MAAMnC,sFAGX,OACEoC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAO,CAACC,WAAY,sBAC1BL,EAAAC,EAAAC,cAACC,EAAA,EAAOG,SAAR,CAAiBC,GAAG,oBAClBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKJ,MAAO,CAACC,WAAY,oBAAqBI,QAAS,KACrDT,EAAAC,EAAAC,cAACM,EAAA,EAAIE,KAAL,CAAUC,KAAK,IAAIP,MAAO,CACtBQ,WAAY,aACXC,UAAU,uCAFf,UAKE/C,aAAagD,SAAWd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQX,MAAO,CACnCY,MAAO,QACPC,aAAc,MACdC,cAAe,QACfb,WAAY,QACZc,MAAO,QACPC,WAAY,GACZC,MAAO,SACNC,QAASC,KAAK5B,eARK,UAStBK,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQX,MAAO,CACbY,MAAO,QACPC,aAAc,MACdC,cAAe,QACfb,WAAY,QACZc,MAAO,QACPC,WAAY,GACZC,MAAO,SACNV,KAAK,UARR,WAUF7C,aAAagD,SAAWd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQX,MAAO,CACnCY,MAAO,QACPC,aAAc,MACdC,cAAe,QACfb,WAAY,QACZc,MAAO,QACPC,WAAY,GACZC,MAAO,SACNV,KAAK,SARc,QAStBX,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQX,MAAO,CACbY,MAAO,QACPC,aAAc,MACdC,cAAe,QACfb,WAAY,QACZc,MAAO,QACPC,WAAY,GACZC,MAAO,SACNV,KAAK,aARR,sBA3CMa,IAAMC,WAmEbC,cAHS,SAAAlD,GAAK,MAAK,CAChCD,KAAMC,EAAMD,OAIZ,CAAEX,cAFW8D,CAGbhC,GCLaiC,qNAnEbnD,MAAQ,CACNoD,KAAM,uFAIY,IAAAC,EAAAN,KAOlBO,MAAY,kBACXC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACH,GACLM,QAAQC,IAAIP,GACZC,EAAKO,SAAS,CAAER,KAAMA,MAEvBS,MAAM,SAACC,GAAD,OAASJ,QAAQC,IAAIG,sCAI5B,OAA2B,MAAxBf,KAAK/C,MAAMoD,KAAKA,KAEf5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOK,GAAG,aACRP,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIqC,IAAI,YAAR,eAEEhB,KAAK/C,MAAMoD,KAAKA,KAAK,GAAGY,cAAcC,IAAI,SAACC,EAAWC,GACpD,OACE3C,EAAAC,EAAAC,cAAA,MAAIqC,IAAKG,EAAUE,YAAaF,EAAUG,SAASC,kBAMzDvB,KAAK/C,MAAMoD,KAAKA,KAAKa,IAAI,SAACM,EAAUJ,GAClC,OACA3C,EAAAC,EAAAC,cAAA,MAAIqC,IAAKQ,EAASC,KAChBhD,EAAAC,EAAAC,cAAA,UAAK6C,EAASE,iBAEZF,EAASP,cAAcC,IAAI,SAACb,EAAMsB,GAChC,OACElD,EAAAC,EAAAC,cAAA,UAAM0B,EAAKuB,OAASvB,EAAKuB,OAAQ,aAcnDnD,EAAAC,EAAAC,cAAA,mBA7DcuB,wDCIhB2B,cACJ,SAAAA,IAAc,IAAAtD,EAAA,OAAAjB,OAAAwE,EAAA,EAAAxE,CAAA0C,KAAA6B,IACZtD,EAAAjB,OAAAyE,EAAA,EAAAzE,CAAA0C,KAAA1C,OAAA0E,EAAA,EAAA1E,CAAAuE,GAAAI,KAAAjC,QAyBFkC,SAAW,SAAA7D,GACTE,EAAKsC,SAALvD,OAAA6E,EAAA,EAAA7E,CAAA,GAAiBe,EAAE+D,OAAOpD,GAAKX,EAAE+D,OAAOC,SA3B5B9D,EA8Bd+D,SAAW,SAAAjE,GACTA,EAAEC,iBAEF,IAAMiE,EAAU,CACdC,KAAMjE,EAAKtB,MAAMuF,KACjBC,MAAOlE,EAAKtB,MAAMwF,MAClBC,SAAUnE,EAAKtB,MAAMyF,SACrBC,UAAWpE,EAAKtB,MAAM0F,WAGxBpE,EAAKC,MAAMoE,aAAaL,EAAShE,EAAKC,MAAMqE,UAtC5CtE,EAAKtB,MAAQ,CACXuF,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXnF,OAAQ,IAPEe,mFAaRyB,KAAKxB,MAAMxB,KAAKJ,iBAClBoD,KAAKxB,MAAMqE,QAAQC,KAAK,uDAIFC,GACpBA,EAAUvF,QACZwC,KAAKa,SAAS,CACZrD,OAAQuF,EAAUvF,0CAsBf,IACCA,EAAWwC,KAAK/C,MAAhBO,OAER,OACEiB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,aACbb,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,OAAKW,UAAU,oBACbb,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UAAUT,MAAO,CAAEmE,YAAa,aAC7CvE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBADF,UAKFF,EAAAC,EAAAC,cAAA,QAAMsE,YAAU,EAACX,SAAUtC,KAAKsC,UAC9B7D,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uBACbb,EAAAC,EAAAC,cAAA,SACEuD,SAAUlC,KAAKkC,SACfG,MAAOrC,KAAK/C,MAAMuF,KAClBU,MAAO1F,EAAOgF,KACdxD,GAAG,OACH7C,KAAK,OACLmD,UAAW6D,IAAW,GAAI,CACxBC,QAAS5F,EAAOgF,SAGpB/D,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,QAAf,QACA5E,EAAAC,EAAAC,cAAA,QAAMW,UAAU,YAAY9B,EAAOgF,OAErC/D,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uBACbb,EAAAC,EAAAC,cAAA,SACEuD,SAAUlC,KAAKkC,SACfG,MAAOrC,KAAK/C,MAAMwF,MAClBS,MAAO1F,EAAOiF,MACdzD,GAAG,QACH7C,KAAK,QACLmD,UAAW6D,IAAW,GAAI,CACxBC,QAAS5F,EAAOiF,UAGpBhE,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,SAAf,SACA5E,EAAAC,EAAAC,cAAA,QAAMW,UAAU,YAAY9B,EAAOiF,QAErChE,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uBACbb,EAAAC,EAAAC,cAAA,SACEuD,SAAUlC,KAAKkC,SACfG,MAAOrC,KAAK/C,MAAMyF,SAClBQ,MAAO1F,EAAOkF,SACd1D,GAAG,WACH7C,KAAK,WACLmD,UAAW6D,IAAW,GAAI,CACxBC,QAAS5F,EAAOkF,aAGpBjE,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,YAAf,YACA5E,EAAAC,EAAAC,cAAA,QAAMW,UAAU,YAAY9B,EAAOkF,WAErCjE,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uBACbb,EAAAC,EAAAC,cAAA,SACEuD,SAAUlC,KAAKkC,SACfG,MAAOrC,KAAK/C,MAAM0F,UAClBO,MAAO1F,EAAOmF,UACd3D,GAAG,YACH7C,KAAK,WACLmD,UAAW6D,IAAW,GAAI,CACxBC,QAAS5F,EAAOmF,cAGpBlE,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,aAAf,oBACA5E,EAAAC,EAAAC,cAAA,QAAMW,UAAU,YAAY9B,EAAOmF,YAErClE,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UAAUT,MAAO,CAAEmE,YAAa,aAC7CvE,EAAAC,EAAAC,cAAA,UACEE,MAAO,CACLY,MAAO,QACPC,aAAc,MACdC,cAAe,QACf2D,UAAW,QAEbnH,KAAK,SACLmD,UAAU,kEARZ,WAYAb,EAAAC,EAAAC,cAAA,KAAGW,UAAU,2BAAb,4BACyBb,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMoE,GAAG,UAAT,uBAhIlBrD,aAsJRC,cALS,SAAAlD,GAAK,MAAK,CAChCD,KAAMC,EAAMD,KACZQ,OAAQP,EAAMO,SAKd,CAAEoF,aRtJwB,SAACY,EAAUX,GAAX,OAAuB,SAAAvG,GACjDT,IACG4H,KAAK,sBAAuBD,GAC5BhD,KAAK,SAAAC,GAAG,OAAIoC,EAAQC,KAAK,YACzBhC,MAAM,SAAAC,GAAG,OACRzE,EAAS,CACPH,KCfkB,aDgBlBC,QAAS2E,EAAIS,SAASnB,YQ6IfF,CAGbuD,YAAW7B,ICzJP8B,cACJ,SAAAA,IAAc,IAAApF,EAAA,OAAAjB,OAAAwE,EAAA,EAAAxE,CAAA0C,KAAA2D,IACZpF,EAAAjB,OAAAyE,EAAA,EAAAzE,CAAA0C,KAAA1C,OAAA0E,EAAA,EAAA1E,CAAAqG,GAAA1B,KAAAjC,QAwBJkC,SAAW,SAAA7D,GACPE,EAAKsC,SAALvD,OAAA6E,EAAA,EAAA7E,CAAA,GAAiBe,EAAE+D,OAAOpD,GAAKX,EAAE+D,OAAOC,SA1B5B9D,EA4BhB+D,SAAW,SAAAjE,GACPA,EAAEC,iBAEN,IAAMkF,EAAW,CACXf,MAAOlE,EAAKtB,MAAMwF,MAClBC,SAAUnE,EAAKtB,MAAMyF,UAE3B/B,QAAQC,IAAI4C,GACZjF,EAAKC,MAAMoF,UAAUJ,IAlCjBjF,EAAKtB,MAAQ,CACXwF,MAAO,GACPC,SAAU,GACVlF,OAAQ,IALEe,mFAURyB,KAAKxB,MAAMxB,KAAKJ,iBAClBoD,KAAKxB,MAAMqE,QAAQC,KAAK,uDAIFC,GACpBA,EAAU/F,KAAKJ,iBACjBoD,KAAKxB,MAAMqE,QAAQC,KAAK,KAE1BC,EAAUvF,QACRwC,KAAKa,SAAS,CACZrD,OAAQuF,EAAUvF,0CAkBjB,IACGA,EAAWwC,KAAK/C,MAAhBO,OACZ,OACMiB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,aACbb,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEyE,UAAW,QAAUhE,UAAU,OAC3Cb,EAAAC,EAAAC,cAAA,OAAKW,UAAU,oBAEbb,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UAAUT,MAAO,CAAEmE,YAAa,aAC7CvE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBADF,UAKFF,EAAAC,EAAAC,cAAA,QAAMsE,YAAU,EAACX,SAAUtC,KAAKsC,UAC9B7D,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uBACbb,EAAAC,EAAAC,cAAA,SACEuD,SAAUlC,KAAKkC,SACfG,MAAOrC,KAAK/C,MAAMwF,MAClBS,MAAO1F,EAAOiF,MACdzD,GAAG,QACH7C,KAAK,QACLmD,UAAW6D,IAAW,GAAI,CACxBC,QAAS5F,EAAOiF,OAASjF,EAAOqG,kBAGpCpF,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,SAAf,SACA5E,EAAAC,EAAAC,cAAA,QAAMW,UAAU,YACb9B,EAAOiF,MACPjF,EAAOqG,gBAGZpF,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uBACbb,EAAAC,EAAAC,cAAA,SACEuD,SAAUlC,KAAKkC,SACfG,MAAOrC,KAAK/C,MAAMyF,SAClBQ,MAAO1F,EAAOkF,SACd1D,GAAG,WACH7C,KAAK,WACLmD,UAAW6D,IAAW,GAAI,CACxBC,QAAS5F,EAAOkF,UAAYlF,EAAOsG,sBAGvCrF,EAAAC,EAAAC,cAAA,SAAO0E,QAAQ,YAAf,YACA5E,EAAAC,EAAAC,cAAA,QAAMW,UAAU,YACb9B,EAAOkF,SACPlF,EAAOsG,oBAGZrF,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UAAUT,MAAO,CAAEmE,YAAa,aAC7CvE,EAAAC,EAAAC,cAAA,UACEE,MAAO,CACLY,MAAO,QACPC,aAAc,MACdC,cAAe,QACf2D,UAAW,QAEbnH,KAAK,SACLmD,UAAU,kEARZ,SAYAb,EAAAC,EAAAC,cAAA,KAAGW,UAAU,2BAAb,0BACuBb,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMoE,GAAG,aAAT,yBAtGnBrD,aAyHHC,cAJS,SAAAlD,GAAK,MAAK,CAChCD,KAAMC,EAAMD,KACZQ,OAAQP,EAAMO,SAId,CAAEoG,UT7GmB,SAAAJ,GAAQ,OAAI,SAAAlH,GACnCT,IACG4H,KAAK,mBAAoBD,GACzBhD,KAAK,SAAAC,GAAO,IAGH7E,EAAU6E,EAAIJ,KAAdzE,MACRW,aAAawH,QAAQ,WAAYnI,GAEjCD,EAAaC,GAEb,IAAMM,EAAU8H,IAAWpI,GAE3BU,EAASL,EAAeC,MAEzB4E,MAAM,SAAAC,GAAG,OACRzE,EAAS,CACPH,KCtCkB,aDuClBC,QAAS2E,EAAIS,SAASnB,YSyFbF,CAGbwD,mBCQWM,mLArIX,OACExF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBAAW0B,IAAmBmC,KAA9B,KACA/D,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UAAUT,MAAO,CAAEmE,YAAa,aAC7CvE,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,0BAAkB0B,IAAmB6D,eAGzCzF,EAAAC,EAAAC,cAAA,YACG0B,IAAmBc,UAAUD,IAAI,SAACiD,EAAU/C,GAC3C,MAC6B,SAA3B+C,EAASC,eACc,UAAvBD,EAASE,UAGP5F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE2F,IAAKH,EAAS9C,WACdxC,MAAO,CACL0F,SAAU,OACV3E,MAAO,OACP4E,UAAW,YAGZL,EAAS7C,UAEZ7C,EAAAC,EAAAC,cAAA,SAAIwF,EAASD,YAAcC,EAASD,YAAc,IAClDzF,EAAAC,EAAAC,cAAA,SACExC,KAAK,OACL0C,MAAO,CAAEY,MAAO,SAChBT,GAAImF,EAAS9C,WACbmB,KAAM2B,EAAS9C,WACfoD,YAAY,sBAKS,SAA3BN,EAASC,eACc,SAAvBD,EAASE,UAGP5F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE2F,IAAKH,EAAS9C,WACdxC,MAAO,CAAE0F,SAAU,OAAQ3E,MAAO,SAEjCuE,EAAS7C,UAEZ7C,EAAAC,EAAAC,cAAA,SAAIwF,EAASD,YAAcC,EAASD,YAAc,IAClDzF,EAAAC,EAAAC,cAAA,YACEE,MAAO,CAAEY,MAAO,QAASiF,OAAQ,SACjC1F,GAAImF,EAAS9C,WACbmB,KAAM2B,EAAS9C,WACfoD,YAAY,sBAKS,oBAA3BN,EAASC,eACa,UAAtBD,EAASQ,SAGPlG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE2F,IAAKH,EAAS9C,WACdxC,MAAO,CAAE0F,SAAU,OAAQ3E,MAAO,SAEjCuE,EAAS7C,UAEZ7C,EAAAC,EAAAC,cAAA,SAAIwF,EAASD,YAAcC,EAASD,YAAc,IAClDzF,EAAAC,EAAAC,cAACiG,EAAA,WAAD,KACGT,EAASU,QAAQ3D,IAAI,SAAC4D,EAAQnD,GAC7B,OACElD,EAAAC,EAAAC,cAACiG,EAAA,YAAD,CAAavC,MAAOyC,EAAOzC,MAAOrB,IAAKW,GACpCmD,EAAOzC,WAQO,oBAA3B8B,EAASC,eACa,SAAtBD,EAASQ,SAGPlG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE2F,IAAKH,EAAS9C,WACdxC,MAAO,CAAE0F,SAAU,OAAQ3E,MAAO,SAEjCuE,EAAS7C,UAEZ7C,EAAAC,EAAAC,cAAA,SAAIwF,EAASD,YAAcC,EAASD,YAAc,IACjDC,EAASU,QAAQ3D,IAAI,SAAC4D,EAAQnD,GAC7B,OACElD,EAAAC,EAAAC,cAAA,KAAGqC,IAAKW,GACNlD,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACExC,KAAK,WACL6C,GAAI8F,EAAOzC,MAAQV,EACnBoD,QAASD,EAAOE,SAAW,UAAY,KAEzCvG,EAAAC,EAAAC,cAAA,YAAOmG,EAAOzC,iBAtBrB,IA+BT5D,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UAAUT,MAAO,CAAEmE,YAAa,aAC7CvE,EAAAC,EAAAC,cAAA,UACEE,MAAO,CACLY,MAAO,QACPC,aAAc,MACdC,cAAe,QACf2D,UAAW,OACX2B,aAAc,QAEhB9I,KAAK,SACLmD,UAAU,kEATZ,oBAnHQW,IAAMC,WCa1B,GAAI3D,aAAagD,SAAU,CAEzB,IAAM3D,EAAQW,aAAagD,SAC3B5D,EAAaC,GAEb,IAAMM,EAAU8H,IAAWpI,GAE3B+B,EAAMrB,SAASL,EAAeC,IAE9B,IAAMgJ,EAAcC,KAAKC,MAAQ,IAC7BlJ,EAAQmJ,IAAMH,IAEhBvH,EAAMrB,SAASD,KAEf4B,OAAOqH,SAASlG,KAAO,eAsBZmG,mLAjBX,OACE9G,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAU7H,MAAOA,GACjBc,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,KACEhH,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAC+G,EAAD,MACAjH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1F,IACjC3B,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWjE,IACzCpD,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWnC,IACtClF,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAW7B,cAV7B/D,aCtBE6F,QACW,cAA7B9H,OAAOqH,SAASU,UAEe,UAA7B/H,OAAOqH,SAASU,UAEhB/H,OAAOqH,SAASU,SAASC,MACvB,2DCZNC,IAASC,OACP1H,EAAAC,EAAAC,cAACF,EAAAC,EAAM0H,WAAP,KACE3H,EAAAC,EAAAC,cAAC0H,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlG,KAAK,SAAAmG,GACJA,EAAaC,eAEd9F,MAAM,SAAAoC,GACLvC,QAAQuC,MAAMA,EAAM2D","file":"static/js/main.1e00a4f6.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // Apply authorization token to every request if logged in\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\nexport default setAuthToken;","import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING\r\n} from \"./types\";\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n// Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import {\r\n    SET_CURRENT_USER,\r\n    USER_LOADING\r\n  } from \"../actions/types\";\r\n  const isEmpty = require(\"is-empty\");\r\n  const initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n  };\r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case SET_CURRENT_USER:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: !isEmpty(action.payload),\r\n          user: action.payload\r\n        };\r\n      case USER_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducers\";\r\nimport errorReducer from \"./errorReducers\";\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  errors: errorReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) ||\r\n      compose\r\n  )\r\n);\r\n\r\nexport default store;","import React from \"react\";\r\nimport { Navbar, Nav, Button } from 'react-bootstrap'\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\n\r\nclass XNavbar extends React.Component {\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  render() {\r\n    return (\r\n      <Navbar style={{background: \"rgb(56, 165, 216)\"}}>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav style={{background: \"rgb(56, 165, 216)\", padding: 10}}>\r\n            <Nav.Link href=\"/\" style={{\r\n                fontFamily: \"monospace\",\r\n              }} className=\"col s5 brand-logo center white-text\">\r\n              Survey\r\n            </Nav.Link>\r\n            {(localStorage.jwtToken)? <Button style={{\r\n                  width: \"120px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  marginLeft: 10,\r\n                  float: \"right\",\r\n                }} onClick={this.onLogoutClick} >Logout</Button> : \r\n                <Button style={{\r\n                  width: \"120px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  marginLeft: 10,\r\n                  float: \"right\",\r\n                }} href=\"/login\"> Login </Button> \r\n              }\r\n            {(localStorage.jwtToken)? <Button style={{\r\n                  width: \"120px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  marginLeft: 10,\r\n                  float: \"right\",\r\n                }} href=\"/form\">Form</Button> : \r\n                <Button style={{\r\n                  width: \"120px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  marginLeft: 10,\r\n                  float: \"right\",\r\n                }} href=\"/register\">Register</Button>\r\n            }\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nXNavbar.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(XNavbar);\r\n\r\n// export default XNavbar;\r\n","import React, { Component } from \"react\";\r\nimport \"./app.css\";\r\n\r\nclass Landing extends Component {\r\n  state = {\r\n    data: {}\r\n  }\r\n  \r\n\r\n  componentDidMount() {\r\n    let url = '';\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n      // dev code\r\n      url = 'http://localhost:5000';\r\n  } \r\n\r\n    fetch(url + '/api/forms/get')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      console.log(data)\r\n      this.setState({ data: data })\r\n    })\r\n    .catch((err) => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    if(this.state.data.data != null)\r\n      return (\r\n        <div>\r\n          <br></br>\r\n          <table id='responses'>\r\n            <tbody>\r\n              <tr>\r\n                <th key='userName'> User Name </th>\r\n                {\r\n                  this.state.data.data[0].totalResponse.map((questions, i) => {\r\n                    return (\r\n                      <th key={questions.identifier}>{questions.headline.toUpperCase()}</th>\r\n                    )\r\n                  })\r\n                }\r\n              </tr>\r\n              {\r\n                this.state.data.data.map((response, i) => {\r\n                  return (\r\n                  <tr key={response._id}>\r\n                    <td>{response.submittedByName}</td>\r\n                    {\r\n                      response.totalResponse.map((data, j) => {\r\n                        return (\r\n                          <td>{(data.answer)? data.answer: \"-\"}</td>\r\n                        )\r\n                      })\r\n                    }\r\n                  </tr>\r\n                  )\r\n                })\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    else{\r\n      return (\r\n        <div>\r\n\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\nexport default Landing;","import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newUser = {\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2\r\n    };\r\n\r\n    this.props.registerUser(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col s8 offset-s2\">\r\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n              <h4>\r\n                <b>Register</b> Here\r\n              </h4>\r\n            \r\n            </div>\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.name}\r\n                  error={errors.name}\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.name\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">Name</label>\r\n                <span className=\"red-text\">{errors.name}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">{errors.email}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">{errors.password}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password2}\r\n                  error={errors.password2}\r\n                  id=\"password2\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password2\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password2\">Confirm Password</label>\r\n                <span className=\"red-text\">{errors.password2}</span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button\r\n                  style={{\r\n                    width: \"150px\",\r\n                    borderRadius: \"3px\",\r\n                    letterSpacing: \"1.5px\",\r\n                    marginTop: \"1rem\"\r\n                  }}\r\n                  type=\"submit\"\r\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                >\r\n                  Sign up\r\n                </button>\r\n                <p className=\"grey-text text-darken-1\">\r\n                Already have an account? <Link to=\"/login\">Log in</Link>\r\n              </p>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { registerUser }\r\n)(withRouter(Register));\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      this.props.history.push(\"/\"); // push user to dashboard when they login\r\n    }\r\nif (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = e => {\r\n    e.preventDefault();\r\n\r\nconst userData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    };\r\nconsole.log(userData);\r\nthis.props.loginUser(userData); // since we handle the redirect \r\n//within our component, we don't need to pass in this.props.history as a parameter\r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n      <div className=\"container\">\r\n        <div style={{ marginTop: \"4rem\" }} className=\"row\">\r\n          <div className=\"col s8 offset-s2\">\r\n           \r\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n              <h4>\r\n                <b>Login</b> Here\r\n              </h4>\r\n             \r\n            </div>\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email || errors.emailnotfound\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">\r\n                  {errors.email}\r\n                  {errors.emailnotfound}\r\n                </span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password || errors.passwordincorrect\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">\r\n                  {errors.password}\r\n                  {errors.passwordincorrect}\r\n                </span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button\r\n                  style={{\r\n                    width: \"150px\",\r\n                    borderRadius: \"3px\",\r\n                    letterSpacing: \"1.5px\",\r\n                    marginTop: \"1rem\"\r\n                  }}\r\n                  type=\"submit\"\r\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                >\r\n                  Login\r\n                </button>\r\n                <p className=\"grey-text text-darken-1\">\r\n                Don't have an account? <Link to=\"/register\">Register</Link>\r\n              </p>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n    loginUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n  };\r\n  const mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n  });\r\n  export default connect(\r\n    mapStateToProps,\r\n    { loginUser }\r\n  )(Login);","import React from \"react\";\r\nimport { RadioGroup, RadioButton } from \"react-radio-buttons\";\r\nimport * as data from \"./data.json\";\r\n\r\nclass XForm extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Form: {data.questionnaire.name} </h4>\r\n        <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n          <p>\r\n            <b>Decsription - {data.questionnaire.description}</b>\r\n          </p>\r\n        </div>\r\n        <form>\r\n          {data.questionnaire.questions.map((question, i) => {\r\n            if (\r\n              question.question_type === \"text\" &&\r\n              question.multiline === \"false\"\r\n            ) {\r\n              return (\r\n                <div>\r\n                  <label\r\n                    for={question.identifier}\r\n                    style={{\r\n                      fontSize: \"1rem\",\r\n                      color: \"blue\",\r\n                      fontStyle: \"oblique\",\r\n                    }}\r\n                  >\r\n                    {question.headline}\r\n                  </label>\r\n                  <p>{question.description ? question.description : \"\"}</p>\r\n                  <input\r\n                    type=\"text\"\r\n                    style={{ width: \"25rem\" }}\r\n                    id={question.identifier}\r\n                    name={question.identifier}\r\n                    placeholder=\"Type your answer\"\r\n                  />\r\n                </div>\r\n              );\r\n            } else if (\r\n              question.question_type === \"text\" &&\r\n              question.multiline === \"true\"\r\n            ) {\r\n              return (\r\n                <div>\r\n                  <label\r\n                    for={question.identifier}\r\n                    style={{ fontSize: \"1rem\", color: \"blue\" }}\r\n                  >\r\n                    {question.headline}\r\n                  </label>\r\n                  <p>{question.description ? question.description : \"\"}</p>\r\n                  <textarea\r\n                    style={{ width: \"25rem\", height: \"10rem\" }}\r\n                    id={question.identifier}\r\n                    name={question.identifier}\r\n                    placeholder=\"Type your answer\"\r\n                  />\r\n                </div>\r\n              );\r\n            } else if (\r\n              question.question_type === \"multiple-choice\" &&\r\n              question.multiple === \"false\"\r\n            ) {\r\n              return (\r\n                <div>\r\n                  <label\r\n                    for={question.identifier}\r\n                    style={{ fontSize: \"1rem\", color: \"blue\" }}\r\n                  >\r\n                    {question.headline}\r\n                  </label>\r\n                  <p>{question.description ? question.description : \"\"}</p>\r\n                  <RadioGroup>\r\n                    {question.choices.map((choice, j) => {\r\n                      return (\r\n                        <RadioButton value={choice.value} key={j}>\r\n                          {choice.value}\r\n                        </RadioButton>\r\n                      );\r\n                    })}\r\n                  </RadioGroup>\r\n                </div>\r\n              );\r\n            } else if (\r\n              question.question_type === \"multiple-choice\" &&\r\n              question.multiple === \"true\"\r\n            ) {\r\n              return (\r\n                <div>\r\n                  <label\r\n                    for={question.identifier}\r\n                    style={{ fontSize: \"1rem\", color: \"blue\" }}\r\n                  >\r\n                    {question.headline}\r\n                  </label>\r\n                  <p>{question.description ? question.description : \"\"}</p>\r\n                  {question.choices.map((choice, j) => {\r\n                    return (\r\n                      <p key={j}>\r\n                        <label>\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            id={choice.value + j}\r\n                            checked={choice.selected ? \"checked\" : \"\"}\r\n                          />\r\n                          <span>{choice.value}</span>\r\n                        </label>\r\n                      </p>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n          <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n            <button\r\n              style={{\r\n                width: \"110px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\",\r\n                marginBottom: \"2rem\",\r\n              }}\r\n              type=\"submit\"\r\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n            >\r\n              SUBMIT\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default XForm;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport XNavbar from \"./components/layout/Navbar\";\r\nimport Landing from \"./components/layout/Landing\";\r\nimport Register from \"./components/auth/Register\";\r\nimport Login from \"./components/auth/Login\";\r\nimport XForm from \"./components/layout/form\";\r\n\r\n\r\n// Check for token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n// Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    // Logout user\r\n    store.dispatch(logoutUser());\r\n    // Redirect to login\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n      <Router>\r\n        <div className=\"App\">\r\n          <XNavbar />\r\n          <Route exact path=\"/\" component={Landing} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/form\" component={XForm} />\r\n\r\n          \r\n        </div>\r\n      </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}