{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/index.js","store.js","components/private-route/PrivateRoute.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/Register.js","components/auth/Login.js","components/layout/form.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","arguments","length","undefined","action","Object","objectSpread","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","connect","_ref","Component","component","rest","objectWithoutProperties","react_default","a","createElement","Route","assign","render","props","Redirect","to","XNavbar","onLogoutClick","e","preventDefault","_this","Navbar","style","background","Collapse","id","Nav","padding","Link","href","fontFamily","className","jwtToken","Button","width","borderRadius","letterSpacing","color","marginLeft","float","onClick","this","React","Landing","data","_this2","fetch","then","res","json","console","log","setState","catch","err","overflow","key","totalResponse","map","questions","i","identifier","headline","toUpperCase","response","_id","submittedByName","j","answer","Register","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","defineProperty","target","value","onSubmit","newUser","name","email","password","password2","registerUser","history","push","nextProps","paddingLeft","noValidate","error","classnames","invalid","htmlFor","marginTop","userData","post","withRouter","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","XForm","values","handleSubmit","bind","assertThisInitialized","event","toConsumableArray","responseData","question","description","finalData","responses","config","method","url","Authorization","Content-Type","alert","_context","t0","status","_this3","question_type","multiline","for","fontSize","fontStyle","placeholder","handleChange","height","multiple","react_radio_buttons_lib","handlevalue","margin","choices","choice","marginBottom","currentTime","Date","now","exp","location","App","es","BrowserRouter","layout_Navbar","exact","path","Switch","private_route_PrivateRoute","Boolean","hostname","match","ReactDOM","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b4522527.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // Apply authorization token to every request if logged in\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\nexport default setAuthToken;","import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING\r\n} from \"./types\";\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n// Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import {\r\n    SET_CURRENT_USER,\r\n    USER_LOADING\r\n  } from \"../actions/types\";\r\n  const isEmpty = require(\"is-empty\");\r\n  const initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false\r\n  };\r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case SET_CURRENT_USER:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: !isEmpty(action.payload),\r\n          user: action.payload\r\n        };\r\n      case USER_LOADING:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }","import { GET_ERRORS } from \"../actions/types\";\r\nconst initialState = {};\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducers\";\r\nimport errorReducer from \"./errorReducers\";\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  errors: errorReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) ||\r\n      compose\r\n  )\r\n);\r\n\r\nexport default store;","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      auth.isAuthenticated === true ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from \"react\";\r\nimport { Navbar, Nav, Button } from 'react-bootstrap'\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\n\r\nclass XNavbar extends React.Component {\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  render() {\r\n    return (\r\n      <Navbar style={{background: \"rgb(56, 165, 216)\"}}>\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav style={{background: \"rgb(56, 165, 216)\", padding: 10}}>\r\n            <Nav.Link href=\"/\" style={{\r\n                fontFamily: \"monospace\",\r\n              }} className=\"col s5 brand-logo center white-text\">\r\n              Survey\r\n            </Nav.Link>\r\n            {(localStorage.jwtToken)? <Button style={{\r\n                  width: \"120px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  marginLeft: 10,\r\n                  float: \"right\",\r\n                }} onClick={this.onLogoutClick} >Logout</Button> : \r\n                <Button style={{\r\n                  width: \"120px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  marginLeft: 10,\r\n                  float: \"right\",\r\n                }} href=\"/login\"> Login </Button> \r\n              }\r\n            {(localStorage.jwtToken)? <Button style={{\r\n                  width: \"120px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  marginLeft: 10,\r\n                  float: \"right\",\r\n                }} href=\"/form\">Form</Button> : \r\n                <Button style={{\r\n                  width: \"120px\",\r\n                  borderRadius: \"3px\",\r\n                  letterSpacing: \"1.5px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  marginLeft: 10,\r\n                  float: \"right\",\r\n                }} href=\"/register\">Register</Button>\r\n            }\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nXNavbar.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser }\r\n)(XNavbar);\r\n\r\n// export default XNavbar;\r\n","import React, { Component } from \"react\";\r\nimport \"./app.css\";\r\n\r\nclass Landing extends Component {\r\n  state = {\r\n    data: {}\r\n  }\r\n  \r\n\r\n  componentDidMount() {\r\n    let url = '';\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n      // dev code\r\n      url = 'http://localhost:5000';\r\n  } \r\n\r\n    fetch(url + '/api/forms/get')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      console.log(data)\r\n      this.setState({ data: data })\r\n    })\r\n    .catch((err) => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    if(this.state.data.data != null)\r\n      return (\r\n        <div style={{overflow:\"auto\"}}>\r\n          <br></br>\r\n          <table id='responses'>\r\n            <tbody>\r\n              <tr>\r\n                <th key='userName'> User Name </th>\r\n                {\r\n                  this.state.data.data[0].totalResponse.map((questions, i) => {\r\n                    return (\r\n                      <th key={questions.identifier}>{questions.headline.toUpperCase()}</th>\r\n                    )\r\n                  })\r\n                }\r\n              </tr>\r\n              {\r\n                this.state.data.data.map((response, i) => {\r\n                  return (\r\n                  <tr key={response._id}>\r\n                    <td>{response.submittedByName}</td>\r\n                    {\r\n                      response.totalResponse.map((data, j) => {\r\n                        return (\r\n                          <td>{(data.answer)? data.answer: \"-\"}</td>\r\n                        )\r\n                      })\r\n                    }\r\n                  </tr>\r\n                  )\r\n                })\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    else{\r\n      return (\r\n        <div>\r\n\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\nexport default Landing;","import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newUser = {\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2\r\n    };\r\n\r\n    this.props.registerUser(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col s8 offset-s2\">\r\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n              <h4>\r\n                <b>Register</b> Here\r\n              </h4>\r\n            \r\n            </div>\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.name}\r\n                  error={errors.name}\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.name\r\n                  })}\r\n                />\r\n                <label htmlFor=\"name\">Name</label>\r\n                <span className=\"red-text\">{errors.name}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">{errors.email}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">{errors.password}</span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password2}\r\n                  error={errors.password2}\r\n                  id=\"password2\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password2\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password2\">Confirm Password</label>\r\n                <span className=\"red-text\">{errors.password2}</span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button\r\n                  style={{\r\n                    width: \"150px\",\r\n                    borderRadius: \"3px\",\r\n                    letterSpacing: \"1.5px\",\r\n                    marginTop: \"1rem\"\r\n                  }}\r\n                  type=\"submit\"\r\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                >\r\n                  Sign up\r\n                </button>\r\n                <p className=\"grey-text text-darken-1\">\r\n                Already have an account? <Link to=\"/login\">Log in</Link>\r\n              </p>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { registerUser }\r\n)(withRouter(Register));\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Login page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      this.props.history.push(\"/\"); // push user to dashboard when they login\r\n    }\r\nif (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = e => {\r\n    e.preventDefault();\r\n\r\nconst userData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    };\r\nconsole.log(userData);\r\nthis.props.loginUser(userData); // since we handle the redirect \r\n//within our component, we don't need to pass in this.props.history as a parameter\r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n      <div className=\"container\">\r\n        <div style={{ marginTop: \"4rem\" }} className=\"row\">\r\n          <div className=\"col s8 offset-s2\">\r\n           \r\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n              <h4>\r\n                <b>Login</b> Here\r\n              </h4>\r\n             \r\n            </div>\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.email || errors.emailnotfound\r\n                  })}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <span className=\"red-text\">\r\n                  {errors.email}\r\n                  {errors.emailnotfound}\r\n                </span>\r\n              </div>\r\n              <div className=\"input-field col s12\">\r\n                <input\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className={classnames(\"\", {\r\n                    invalid: errors.password || errors.passwordincorrect\r\n                  })}\r\n                />\r\n                <label htmlFor=\"password\">Password</label>\r\n                <span className=\"red-text\">\r\n                  {errors.password}\r\n                  {errors.passwordincorrect}\r\n                </span>\r\n              </div>\r\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n                <button\r\n                  style={{\r\n                    width: \"150px\",\r\n                    borderRadius: \"3px\",\r\n                    letterSpacing: \"1.5px\",\r\n                    marginTop: \"1rem\"\r\n                  }}\r\n                  type=\"submit\"\r\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n                >\r\n                  Login\r\n                </button>\r\n                <p className=\"grey-text text-darken-1\">\r\n                Don't have an account? <Link to=\"/register\">Register</Link>\r\n              </p>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n    loginUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n  };\r\n  const mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n  });\r\n  export default connect(\r\n    mapStateToProps,\r\n    { loginUser }\r\n  )(Login);","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { RadioGroup, RadioButton } from \"react-radio-buttons\";\r\nimport * as data from \"./data.json\";\r\n\r\nclass XForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { values: [] };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n      //text\r\n      handleChange(i, event) {\r\n        let values = [...this.state.values];\r\n        values[i] = event.target.value;\r\n        this.setState({ values });\r\n     }\r\n     //radio\r\n     handlevalue(i, event) {\r\n      let values = [...this.state.values];\r\n      values[i] = event;\r\n      this.setState({ values });\r\n   }\r\n\r\n   async handleSubmit(event) {\r\n      event.preventDefault();\r\n      let responseData = [];\r\n      await data.questionnaire.questions.map((question, i) => {\r\n        responseData.push({\r\n          identifier: question.identifier,\r\n          headline: question.headline,\r\n          description: question.description,\r\n          answer: this.state.values[i]\r\n        });\r\n      });\r\n\r\n      let finalData = {\r\n        responses: responseData,\r\n      };\r\n      \r\n      let url = '';\r\n      if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n        // dev code\r\n        url = 'http://localhost:5000';\r\n      } \r\n\r\n      var config = {\r\n        method: 'post',\r\n        url: url+'/api/forms/submit',\r\n        headers: { \r\n          'Authorization': localStorage.jwtToken, \r\n          'Content-Type': 'application/json'\r\n        },\r\n        data : finalData\r\n      };\r\n\r\n      try {\r\n        await axios(config);\r\n        alert('You have successfully submitted the response!');\r\n        this.props.history.push(\"/\");\r\n      } catch (error) {\r\n        if(error.response.status === 500){\r\n          alert('You have already submitted the response!');\r\n          this.props.history.push(\"/\");\r\n        }else if(error.response.status === 401){\r\n          alert('You are not authorized to submitted the response!');\r\n          this.props.history.push(\"/\");\r\n        }else{\r\n          alert('unexpected error occurred retry again!');\r\n        }\r\n      }\r\n    }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>Form: {data.questionnaire.name} </h4>\r\n        <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n          <p>\r\n            <b>Decsription - {data.questionnaire.description}</b>\r\n          </p>\r\n        </div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          {data.questionnaire.questions.map((question, i) => {\r\n            if (\r\n              question.question_type === \"text\" &&\r\n              question.multiline === \"false\"\r\n            ) {\r\n              return (\r\n                <div>\r\n                  <label\r\n                    for={question.identifier}\r\n                    style={{\r\n                      fontSize: \"1rem\",\r\n                      color: \"blue\",\r\n                      fontStyle: \"oblique\",\r\n                    }}\r\n                  >\r\n                    {question.headline}\r\n                  </label>\r\n                  <p>{question.description ? question.description : \"\"}</p>\r\n                  <input\r\n                    type=\"text\"\r\n                    style={{ width: \"25rem\" }}\r\n                    id={question.identifier}\r\n                    name={question.identifier}\r\n                    placeholder=\"Type your answer\"\r\n                    onChange={this.handleChange.bind(this, i)}\r\n                  />\r\n                </div>\r\n              );\r\n            } else if (\r\n              question.question_type === \"text\" &&\r\n              question.multiline === \"true\"\r\n            ) {\r\n              return (\r\n                <div>\r\n                  <label\r\n                    for={question.identifier}\r\n                    style={{ fontSize: \"1rem\", color: \"blue\" }}\r\n                  >\r\n                    {question.headline}\r\n                  </label>\r\n                  <p>{question.description ? question.description : \"\"}</p>\r\n                  <textarea\r\n                    style={{ width: \"25rem\", height: \"10rem\" }}\r\n                    id={question.identifier}\r\n                    name={question.identifier}\r\n                    placeholder=\"Type your answer\"\r\n                    onChange={this.handleChange.bind(this, i)}\r\n                  />\r\n                </div>\r\n              );\r\n            } else if (\r\n              question.question_type === \"multiple-choice\" &&\r\n              question.multiple === \"false\"\r\n            ) {\r\n              return (\r\n                <div>\r\n                  <label\r\n                    for={question.identifier}\r\n                    style={{ fontSize: \"1rem\", color: \"blue\" }}\r\n                  >\r\n                    {question.headline}\r\n                  </label>\r\n                  <p>{question.description ? question.description : \"\"}</p>\r\n                  <RadioGroup onChange={this.handlevalue.bind(this, i)} style={{ width: \"25rem\",margin:\"auto\" }} >\r\n                    {question.choices.map((choice, j) => {\r\n                      return (\r\n                        <RadioButton value={choice.value} key={j} \r\n                        style={{ width: \"2rem\", height: \"1rem\" }} >\r\n                          {choice.value}\r\n                        </RadioButton>\r\n                      );\r\n                    })}\r\n                  </RadioGroup>\r\n                </div>\r\n              );\r\n            } \r\n            //checkbox\r\n          })}\r\n          <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\r\n            <button\r\n              style={{\r\n                width: \"110px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\",\r\n                marginBottom: \"2rem\",\r\n              }}\r\n              type=\"submit\"\r\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\r\n              \r\n            >\r\n              SUBMIT\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default XForm;\r\n\r\n","import React, { Component } from \"react\";\r\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\r\nimport XNavbar from \"./components/layout/Navbar\";\r\nimport Landing from \"./components/layout/Landing\";\r\nimport Register from \"./components/auth/Register\";\r\nimport Login from \"./components/auth/Login\";\r\nimport XForm from \"./components/layout/form\";\r\n\r\n\r\n// Check for token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n// Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    // Logout user\r\n    store.dispatch(logoutUser());\r\n    // Redirect to login\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n      <Router>\r\n        <div className=\"App\">\r\n          <XNavbar />\r\n          <Route exact path=\"/\" component={Landing} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Switch>\r\n              <PrivateRoute exact path=\"/form\" component={XForm} />\r\n            </Switch>\r\n          \r\n        </div>\r\n      </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}